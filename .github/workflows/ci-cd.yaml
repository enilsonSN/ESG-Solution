name: CI/CD Pipeline - ESG Solution

on:
  push:
    branches:
      - main
      - staging
  pull_request:

jobs:
  build-and-test:
    name: 🧪 Build & Test
    runs-on: ubuntu-latest

    steps:
      - name: 🔹 Checkout do código
        uses: actions/checkout@v4

      - name: ☕ Configurar JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: ⚙️ Build e Testes
        run: mvn clean package --batch-mode

      - name: 📦 Upload do JAR como Artefato
        uses: actions/upload-artifact@v4
        with:
          name: spring-boot-app

          path: target/*.jar

  deploy-staging:
    name: 🚀 Deploy para Staging (Azure)
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/staging'

    steps:
      - name: 🔹 Checkout do código
        uses: actions/checkout@v4

      - name: ⬇️ Download do JAR Artefato
        uses: actions/download-artifact@v4
        with:
          name: spring-boot-app
          path: target/

      - name: 🐳 Build & Push Imagem Docker (staging)
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          # O JAR está em target/, então o Dockerfile encontrará!
          docker build -t esg-solution/esg-solution:staging . 
          docker push esg-solution/esg-solution:staging

      - name: 🔐 Login no Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: 🔁 Atualizar App Service (staging)
        run: |
          az webapp config container set \
            --name esg-solution-staging \
            --resource-group rs-fiap-on \
            --docker-custom-image-name esg-solution/esg-solution:staging
          az webapp restart \
            --name esg-solution-staging \
            --resource-group rs-fiap-on

  deploy-production:
    name: 🚀 Deploy para Produção (Azure)
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.ref == 'refs/heads/main'

    steps:
      - name: 🔹 Checkout do código
        uses: actions/checkout@v4

      - name: ⬇️ Download do JAR Artefato
        uses: actions/download-artifact@v4
        with:
          name: spring-boot-app
          path: target/

      - name: 🐳 Build & Push Imagem Docker (prod)
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
          # O JAR está em target/, então o Dockerfile encontrará!
          docker build -t esg-solution/esg-solution:latest .
          docker push esg-solution/esg-solution:latest

      - name: 🔐 Login no Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_